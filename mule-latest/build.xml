<?xml version="1.0"?>

<project name="mule" default="usage" basedir=".">

    <property file="project.properties"/>
	<property environment="env"/>

	<condition property="mvn.executable" value="mvn.bat">
            <os family="windows" />
    </condition>

    <condition property="mvn.executable" value="mvn">
            <os family="unix" />
    </condition>
	
    <path id="all-libs">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    	<fileset dir="${openspaces.dir.mule}/lib/required">
            <include name="**/*.jar"/>
        </fileset>
    	<fileset dir="${openspaces.dir.mule}/lib/platform/jee">
            <include name="**/*.jar"/>
        </fileset>
    	<fileset dir="${openspaces.dir.mule}/lib/external/backport">
            <include name="**/*.jar"/>
        </fileset>
    	<fileset dir="${openspaces.dir.mule}/lib/external/common">
            <include name="**/*.jar"/>
        </fileset>
    	<fileset dir="${openspaces.dir.mule}/lib/external/junit">
            <include name="**/*.jar"/>
        </fileset>
    	<fileset dir="${openspaces.dir.mule}/lib/external/spring">
            <include name="**/*.jar"/>
        </fileset>
    	<fileset dir="${openspaces.dir.mule}/lib/external/jotm">
            <include name="**/*.jar"/>
        </fileset>
    	<fileset dir="${openspaces.dir.mule}/lib/external/jbossts">
    		<include name="**/*.jar"/>
    	</fileset>
    	<pathelement location="${openspaces.dir.mule}/target/classes"/>
    	<pathelement location="${openspaces.dir.mule}/target/test-classes"/>
    	<pathelement location="${gigaspaces.dir.mule}/classes"/>
		<path path="${gigaspaces.dir.mule}/src/java/resources" />
    	<path path="${gigaspaces.dir.mule}" />
    	<pathelement location="${gigaspaces.dir.mule}/tools/lib/hibernate/slf4j-api-1.6.1.jar" />
    </path>

  
    <target name="usage">
        <echo message=""/>
        <echo message="Mule build script"/>
        <echo message="-----------------------------------------"/>
        <echo message=""/>
        <echo message="Among the available targets are:"/>
        <echo message=""/>
        <echo message="clean    --> Cleans all output dirs"/>
        <echo message="build    --> build all; don't create JARs"/>
        <echo message="tests    --> run tests"/>
        <echo message="dist     --> create a distribution"/>
        <echo message=""/>
    </target>

    <target name="clean" description="Clean all output dirs (dist, javadocs, classes, test-classes, etc)">
        <!-- Just kill target dir (it's safer). No need at this point to keep it. -->
        <delete dir="${target.dir}"/>
    </target>

    <!--
    ########### COMPILE TARGETS ###########
    -->

    <target name="buildmain" description="Compile main source tree java files into class files">

        <mkdir dir="${target.classes.dir}"/>
        <mkdir dir="${target.classes.dir}/META-INF"/>

        <javac  destdir="${target.classes.dir}" source="1.6" target="1.6" debug="${debug}"
               deprecation="false" optimize="false" failonerror="true">
            <src path="${main.src.dir}"/>
            <classpath refid="all-libs"/>
        </javac>

    	<copy todir="${target.classes.dir}" preservelastmodified="true">
            <fileset dir="${main.src.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.handlers"/>
                <include name="**/*.schemas"/>
                <include name="**/*.xml"/>
                <include name="**/*.dtd"/>
                <include name="**/*.xsd"/>
                <include name="**/*.groovy"/>
            </fileset>
    		
    		<fileset dir="${main.src.resources.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.handlers"/>
                <include name="**/*.schemas"/>
                <include name="**/*.xml"/>
                <include name="**/*.dtd"/>
                <include name="**/*.xsd"/>
                <include name="**/*.groovy"/>
            </fileset>
        </copy>
    </target>


    <target name="build" depends="clean, buildmain" description="Compile main sources"/>

    <target name="fulljar" depends="build, jar"/>

    <target name="jar" description="Create full JAR file">
    	
    	<delete dir="${lib.dir}/optional/openspaces/"/>
        <mkdir dir="${lib.dir}/optional/openspaces/"/>
        <delete file="${lib.dir}/optional/openspaces/mule-os.jar"/>

        <jar jarfile="${lib.dir}/optional/openspaces/mule-os.jar">
        	<fileset dir="${target.classes.dir}">
                <include name="org/openspaces/esb/mule/**"/>
            </fileset>
        	<fileset dir="${main.src.resources.dir}">
        		<include name="META-INF/services/org/mule/**"/>
                <include name="META-INF/spring.handlers"/>
                <include name="META-INF/spring.schemas"/>
        	</fileset>
            <manifest>
                <attribute name="Implementation-Title" value="${mule.title}"/>
            </manifest>
        </jar>
    </target>
	
	 <target name="schema" description="Copy over schema files">
	    <delete dir="lib/optional/openspaces/schema"/>
		<mkdir dir="lib/optional/openspaces/schema"/>
	    <copy todir="lib/optional/openspaces/schema" flatten="true">
	        <fileset dir="${main.src.dir}">
	            <include name="**/*.xsd"/>
	        </fileset>
	    </copy>
	</target>
	
	<target name="install.maven" description="Copy over schema files">
		<exec executable="${env.M2_HOME}\bin\${mvn.executable}"> 
			<arg line="install:install-file -DgroupId=com.gigaspaces -DartifactId=mule-os -DcreateChecksum=true -Dversion=${productversion} -Dpackaging=jar -DpomFile=${openspaces.dir.mule}/maven.tmp.dir/mule-os-pom.xml -Dfile=${lib.dir}/optional/openspaces/mule-os.jar"/>
		</exec>
	</target>


    <target name="dist" depends="build, fulljar, install.maven, schema"
            description="Creates the OpenSpaces distribution">
        <mkdir dir="${dist.dir}"/>
        <delete file="${dist.dir}/${mule.name}.zip"/>
        <zip zipfile="${dist.dir}/${mule.name}.zip">
            <zipfileset dir="${basedir}">
                <include name="lib/optional/**"/>
            </zipfileset>
        </zip>
    </target>


    <!--
    ########### TEST TARGETS ###########
    -->

    <!--
         Compile the main test tree.
     -->
    <target name="buildmaintests" depends="build"
            description="Compile test source tree java files into class files">

        <mkdir dir="${target.testclasses.dir}"/>

        <javac destdir="${target.testclasses.dir}" source="1.6" target="1.6" debug="${debug}"
               deprecation="false" optimize="false" failonerror="true">
            <src path="${main.test.dir}"/>
            <classpath refid="all-libs"/>
            <classpath location="${target.classes.dir}"/>
        </javac>

        <!-- Pick up config files from test directory -->
        <copy todir="${target.testclasses.dir}" preservelastmodified="true">
            <fileset dir="${main.test.resources.dir}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
        </copy>

    </target>


    <target name="buildtests" depends="buildmaintests" description="Compile main test sources"/>


    <target name="maintests" depends="buildtests" description="Run main tests">

        <mkdir dir="${target.junit.reports.dir}"/>

        <junit forkmode="${junit.forkmode}" printsummary="yes" haltonfailure="no" haltonerror="no">

            <jvmarg line="-Djava.security.policy=policy/policy.all -Djava.awt.headless=true -Xmx512m -XX:MaxPermSize=128m"/>

            <classpath location="${target.testclasses.dir}"/>
            <classpath location="${target.classes.dir}"/>

            <!-- Need files loaded as resources -->
            <classpath location="${main.test.dir}"/>
        	
        	<classpath refid="all-libs"/>

            <formatter type="plain" usefile="false"/>

            <batchtest fork="yes" todir="${target.junit.reports.dir}">
                <fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
            </batchtest>

        </junit>

    </target>


    <target name="tests" depends="maintests" description="Run tests"/>


    <!--
         Run test suite and generate test summary, for both main and sandbox tests.
         Does not halt on failure or error, in contrast to the "tests" target above.
     -->
    <target name="testsummary" depends="buildtests" description="Run tests and generate test summary">

        <mkdir dir="${target.junit.reports.dir}"/>
        <mkdir dir="${target.junit.summary.dir}"/>

        <junit failureproperty="junit.tests.failed" errorproperty="junit.tests.error" forkmode="${junit.forkmode}" printsummary="yes" haltonfailure="no" haltonerror="no">

            <jvmarg line="-Djava.security.policy=policy/policy.all -Djava.awt.headless=true -Xmx512m -XX:MaxPermSize=128m"/>

            <!-- Must go first to ensure any jndi.properties files etc take precedence  -->
            <classpath location="${target.testclasses.dir}"/>
            <classpath location="${target.classes.dir}"/>

            <!-- Need files loaded as resources -->
            <classpath location="${main.test.dir}"/>
            	
            <classpath refid="all-libs"/>

            <formatter type="plain" usefile="false"/>
            <formatter type="xml"/>

            <batchtest fork="yes" todir="${target.junit.reports.dir}">
                <fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
            </batchtest>

        </junit>

        <junitreport todir="${target.junit.reports.dir}">
            <fileset dir="${target.junit.reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${target.junit.summary.dir}"/>
        </junitreport>
    	
    	<ant target="create.dummy.file.if.tests.failed"/>
    	<ant target="create.dummy.file.if.error.in.tests"/> 
    	
    	<!--fail if="junit.tests.failed" message="JUnit tests failed. exiting..."/-->

    </target>
	
	<target name="create.dummy.file.if.tests.failed" if="junit.tests.failed">
		<touch file="${target.junit.reports.dir}/failed" />
	</target>
	
	<target name="create.dummy.file.if.error.in.tests" if="junit.tests.error">
		<touch file="${target.junit.reports.dir}/error" />
	</target>
		
    <target name="clean_tests" depends="clean,tests"/>
    
</project>